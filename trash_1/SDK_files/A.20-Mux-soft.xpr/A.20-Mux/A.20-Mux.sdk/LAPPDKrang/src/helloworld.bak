/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
/* Lets see which ones of these actually work */
#include "xparameters.h"
#include "mb_interface.h"
#include "fsl.h"
#include "xil_types.h"
#include "xil_io.h"
//#include "xiomodule.h"
//#include <string.h>
//#include <stdlib.h>
//#include <malloc.h>

#define IBUFLEN 128
#define CUSTOM_REG_OFFSET 0x20
// Unions are sick af
// Define a 5-byte object
union cuteStuff {
  u32 u32View;
  char8 strView[5];
};


// Since we are embedded, don't implement
// a full complement of ports.
#define MAX_CONNECTIONS 10

// Return "file descriptor" integers
// which are SOCKET_FD_OFFSET + udp port
#define SOCKET_FD_OFFSET 10

// When we recive data at the socket, we may need to extend the buffer as data comes in
// This gives the minimum extension size in bytes.
//
// The idea here is that any particular socket is never going to have more than
#define SOCKET_RING_SIZE 0x0800

//
// ghetto sockets are always processed in this way:
//  loop over all sockets:
//    anything in the buffer to write is written out
//    
// These point to locations in memory which hold header-stripped payloads that have been routed into
// that specific port.
struct socketStruct {
  u8 *buffer;
  u16 rOffset;
  u16 wOffset;
  u16 size;
};

struct socketStruct sockets[MAX_CONNECTIONS];


//
// Handles mapping the socket buffers
// POSIX-style
// This allocates
//
int socket(int domain, int type, int protocol) {

  // Only support ipv4 packets
  if(domain != AF_INET) {
    errno = EINVAL;
    return -1;
  }
   
  // Only support UDP
  if(type != SOCK_DRGAM) {
    errno = EINVAL;
    return -1;
  }

  // Check for sanify
  if(!protocol) {
    errno = EINVAL;
    return -1;
  }

  // Find the first free buffer
  for(i = 0; i < MAX_PORTS; ++i) {
    if(!socket_buffers[i])
      break;
  }

  // Check for exhaustion
  if(i == MAX_PORTS) {
    errno = ENOBUFS;
    return -1;
  }

  // Allocate the socket buffer
  // Note that errno shouold be set by malloc(), so don't trample it
  if(!(sockets[i].buffer = (u8 *)malloc(SOCKET_MIN_ALLOCATION)))
    return -1;

  // Initialize the socket
  sockets[i].rOffset = 0x0;
  sockets[i].wOffset = 0x0;
  sockets[i].size = SOCKET_MIN_ALLOCATION;

  // The socket is ready to be bind()-ed
  return i;
}

//
// Close socket
//
int close_socket(int socket_fd) {

  // Make sure this is allocated
  if(!socket_buffers[socket_fd]) {
    errno = EBADF;
    return -1;
  }

  // Get rid of it
  free(socket_buffers[socket_fd]);
  socket_buffers[socket_fd] = NULL;
  return 0;
}

//
// Implement a bind
// Connects a socket file descriptor to a port
// (simplified, since we are only working on a single IP address)
//
// The reason we need this is that multiple other machines can connect
// to the board and query the register system, or perform operations.
//
// So the control interface will act as a server socket, and then assign
// 
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen) {

  
}


// 
//
// Flow:
//   1) Build MAC address from device dna (so its unique)
//   2) Read ethernet frames


int main()
{
  union cuteStuff tmp;

  u32 tI, tL;
  char8 charsPrinted = 0;
  u16 charsRecvd = 0;
  char8 buf[IBUFLEN];

  // Seems important.
  init_platform();

  // Set everything to empty
  memset(buf, 0, IBUFLEN);
  memset(tmp.strView, 0, 5);

  // Set the UART for nonblocking reads
  fcntl(0, F_SETFL, O_NONBLOCK);

  while(1) {

    //////////////////////////////////////////
    //
    // Code for deterministic output test
    //
    //////////////////////////////////////////
    //sleep(1);
    //tmp.u32View = 0x12345678;
    //putfslx(tmp.u32View, 0, FSL_CONTROL);
		
    //print("Hey\n");
    ////////////////////////////////////////////
    //
    // Code for ASCII frame echo to UART
    //
    ////////////////////////////////////////////
    /* getfslx(tmp.u32View, 0, FSL_NONBLOCKING); */

    /* // This is awful macro notation, fml */
    /* fsl_isinvalid(tI); */
    /* fsl_iserror(tL); */

    /* if(tI) */
    /*   continue; */

    /* // Yes it is. */
    /* // Clean out non-ASCII bytes */
    /* // RECYCLE: tI. (its already been used in this pass.) */
    /* for(tI = 0; tI < 4; ++tI) { */
    /*   if(tmp.strView[tI] < 32 || tmp.strView[tI] > 126) */
    /* 	tmp.strView[tI] = '.'; */
    /* } */

    /* // Output on the UART */
    /* print(tmp.strView); */
    /* if((charsPrinted += 4) > 32) { */

    /*   // Newline for cleanliness */
    /*   print("\n"); */
    /*   charsPrinted = 0; */
    /* } */

    /////////////////////////////////////////////
    //
    // Code for UART read and echo to NishiPHY
    //
    /////////////////////////////////////////////
    read(0, buf+charsRecvd, 1);

    // If the read was successful?
    if(!errno) {

      // Did we fill our buffer?
      // Note that charsRecvd++ increments after the evaluation (or at least it should)
      // (We subtract 1 so that we do not overwrite the buffer's null termination, even
      // though none of our routines care about that)
      if(buf[charsRecvd++] == '\r' || charsRecvd == IBUFLEN-1) {

    	// RECYCLE: tI.
    	// Copy them out, one 4-byte chunk at a time
    	for(tI = 0; (int)tI < ((int)charsRecvd-4); tI += 4) {
    	  memcpy(tmp.strView, buf+tI, 4);
    	  putfslx(tmp.u32View, 0, FSL_DEFAULT);
    	}

    	// Residual
    	// RECYCLE: tL (use it to track how many valid bytes remained)
    	tL = charsRecvd - tI;
    	memset(tmp.strView, 0, 4);
    	memcpy(tmp.strView, buf+tI, tL);

    	// Now place the last word using FSL_CONTROL
    	putfslx(tmp.u32View, 0, FSL_CONTROL);

    	print("UART Rx echoed on SFP\n");
    	// Reset the buffer position
    	charsRecvd = 0;

    	// Explicitly output the known control registers
	for(tL = 0x0; tL < 0x10; tL += 0x04) {
	  tmp.u32View = *((u32 *)(XPAR_IOMODULE_0_IO_BASEADDR | CUSTOM_REG_OFFSET | tL));
	  putfslx(Xil_Htonl(tmp.u32View), 0, FSL_DEFAULT);
	}
	
	tmp.u32View = *((u32 *)(XPAR_IOMODULE_0_IO_BASEADDR | CUSTOM_REG_OFFSET | tL));
	putfslx(Xil_Htonl(tmp.u32View), 0, FSL_CONTROL);
	print("Device DNA echoed on SFP\n");
	
      }
    }
    else {
      print("Error #: ");
      putnum(errno);
      print("\n");
    }
  }

  print("We done exited.\n");
  cleanup_platform();
  return 0;
}
