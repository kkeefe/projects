--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2018 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--    Generated from core with identifier:                                    --
--    xilinx.com:ip:axi_interconnect:1.06.a                                   --
--                                                                            --
--    The AXI Interconnect core connects one or more AXI4 memory-mapped       --
--    master devices to one AXI4 slave device.                                --
--------------------------------------------------------------------------------

-- Interfaces:
--    AXI4_SLAVE_S00_AXI
--    AXI4_SLAVE_S11_AXI
--    AXI4_SLAVE_S12_AXI
--    AXI4_SLAVE_S10_AXI
--    AXI4_SLAVE_S08_AXI
--    AXI4_SLAVE_S13_AXI
--    AXI4_SLAVE_S02_AXI
--    AXI4_MASTER_M00_AXI
--    AXI4_SLAVE_S15_AXI
--    AXI4_SLAVE_S06_AXI
--    AXI4_SLAVE_S01_AXI
--    AXI4_SLAVE_S09_AXI
--    AXI4_SLAVE_S14_AXI
--    AXI4_SLAVE_S03_AXI
--    AXI4_SLAVE_S04_AXI
--    AXI4_SLAVE_S05_AXI
--    AXI4_SLAVE_S07_AXI

-- The following code must appear in the VHDL architecture header:

------------- Begin Cut here for COMPONENT Declaration ------ COMP_TAG
COMPONENT axi_fifo_0
  PORT (
    INTERCONNECT_ACLK : IN STD_LOGIC;
    INTERCONNECT_ARESETN : IN STD_LOGIC;
    S00_AXI_ARESET_OUT_N : OUT STD_LOGIC;
    S00_AXI_ACLK : IN STD_LOGIC;
    S00_AXI_AWID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    S00_AXI_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S00_AXI_AWLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    S00_AXI_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    S00_AXI_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    S00_AXI_AWLOCK : IN STD_LOGIC;
    S00_AXI_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    S00_AXI_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    S00_AXI_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    S00_AXI_AWVALID : IN STD_LOGIC;
    S00_AXI_AWREADY : OUT STD_LOGIC;
    S00_AXI_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S00_AXI_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    S00_AXI_WLAST : IN STD_LOGIC;
    S00_AXI_WVALID : IN STD_LOGIC;
    S00_AXI_WREADY : OUT STD_LOGIC;
    S00_AXI_BID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    S00_AXI_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    S00_AXI_BVALID : OUT STD_LOGIC;
    S00_AXI_BREADY : IN STD_LOGIC;
    S00_AXI_ARID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    S00_AXI_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S00_AXI_ARLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    S00_AXI_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    S00_AXI_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    S00_AXI_ARLOCK : IN STD_LOGIC;
    S00_AXI_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    S00_AXI_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    S00_AXI_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    S00_AXI_ARVALID : IN STD_LOGIC;
    S00_AXI_ARREADY : OUT STD_LOGIC;
    S00_AXI_RID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    S00_AXI_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    S00_AXI_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    S00_AXI_RLAST : OUT STD_LOGIC;
    S00_AXI_RVALID : OUT STD_LOGIC;
    S00_AXI_RREADY : IN STD_LOGIC;
    M00_AXI_ARESET_OUT_N : OUT STD_LOGIC;
    M00_AXI_ACLK : IN STD_LOGIC;
    M00_AXI_AWID : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M00_AXI_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    M00_AXI_AWLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    M00_AXI_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    M00_AXI_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    M00_AXI_AWLOCK : OUT STD_LOGIC;
    M00_AXI_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M00_AXI_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    M00_AXI_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M00_AXI_AWVALID : OUT STD_LOGIC;
    M00_AXI_AWREADY : IN STD_LOGIC;
    M00_AXI_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    M00_AXI_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M00_AXI_WLAST : OUT STD_LOGIC;
    M00_AXI_WVALID : OUT STD_LOGIC;
    M00_AXI_WREADY : IN STD_LOGIC;
    M00_AXI_BID : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    M00_AXI_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    M00_AXI_BVALID : IN STD_LOGIC;
    M00_AXI_BREADY : OUT STD_LOGIC;
    M00_AXI_ARID : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M00_AXI_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    M00_AXI_ARLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    M00_AXI_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    M00_AXI_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    M00_AXI_ARLOCK : OUT STD_LOGIC;
    M00_AXI_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M00_AXI_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    M00_AXI_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M00_AXI_ARVALID : OUT STD_LOGIC;
    M00_AXI_ARREADY : IN STD_LOGIC;
    M00_AXI_RID : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    M00_AXI_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    M00_AXI_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    M00_AXI_RLAST : IN STD_LOGIC;
    M00_AXI_RVALID : IN STD_LOGIC;
    M00_AXI_RREADY : OUT STD_LOGIC
  );
END COMPONENT;
-- COMP_TAG_END ------ End COMPONENT Declaration ------------

-- The following code must appear in the VHDL architecture
-- body. Substitute your own instance name and net names.

------------- Begin Cut here for INSTANTIATION Template ----- INST_TAG
your_instance_name : axi_fifo_0
  PORT MAP (
    INTERCONNECT_ACLK => INTERCONNECT_ACLK,
    INTERCONNECT_ARESETN => INTERCONNECT_ARESETN,
    S00_AXI_ARESET_OUT_N => S00_AXI_ARESET_OUT_N,
    S00_AXI_ACLK => S00_AXI_ACLK,
    S00_AXI_AWID => S00_AXI_AWID,
    S00_AXI_AWADDR => S00_AXI_AWADDR,
    S00_AXI_AWLEN => S00_AXI_AWLEN,
    S00_AXI_AWSIZE => S00_AXI_AWSIZE,
    S00_AXI_AWBURST => S00_AXI_AWBURST,
    S00_AXI_AWLOCK => S00_AXI_AWLOCK,
    S00_AXI_AWCACHE => S00_AXI_AWCACHE,
    S00_AXI_AWPROT => S00_AXI_AWPROT,
    S00_AXI_AWQOS => S00_AXI_AWQOS,
    S00_AXI_AWVALID => S00_AXI_AWVALID,
    S00_AXI_AWREADY => S00_AXI_AWREADY,
    S00_AXI_WDATA => S00_AXI_WDATA,
    S00_AXI_WSTRB => S00_AXI_WSTRB,
    S00_AXI_WLAST => S00_AXI_WLAST,
    S00_AXI_WVALID => S00_AXI_WVALID,
    S00_AXI_WREADY => S00_AXI_WREADY,
    S00_AXI_BID => S00_AXI_BID,
    S00_AXI_BRESP => S00_AXI_BRESP,
    S00_AXI_BVALID => S00_AXI_BVALID,
    S00_AXI_BREADY => S00_AXI_BREADY,
    S00_AXI_ARID => S00_AXI_ARID,
    S00_AXI_ARADDR => S00_AXI_ARADDR,
    S00_AXI_ARLEN => S00_AXI_ARLEN,
    S00_AXI_ARSIZE => S00_AXI_ARSIZE,
    S00_AXI_ARBURST => S00_AXI_ARBURST,
    S00_AXI_ARLOCK => S00_AXI_ARLOCK,
    S00_AXI_ARCACHE => S00_AXI_ARCACHE,
    S00_AXI_ARPROT => S00_AXI_ARPROT,
    S00_AXI_ARQOS => S00_AXI_ARQOS,
    S00_AXI_ARVALID => S00_AXI_ARVALID,
    S00_AXI_ARREADY => S00_AXI_ARREADY,
    S00_AXI_RID => S00_AXI_RID,
    S00_AXI_RDATA => S00_AXI_RDATA,
    S00_AXI_RRESP => S00_AXI_RRESP,
    S00_AXI_RLAST => S00_AXI_RLAST,
    S00_AXI_RVALID => S00_AXI_RVALID,
    S00_AXI_RREADY => S00_AXI_RREADY,
    M00_AXI_ARESET_OUT_N => M00_AXI_ARESET_OUT_N,
    M00_AXI_ACLK => M00_AXI_ACLK,
    M00_AXI_AWID => M00_AXI_AWID,
    M00_AXI_AWADDR => M00_AXI_AWADDR,
    M00_AXI_AWLEN => M00_AXI_AWLEN,
    M00_AXI_AWSIZE => M00_AXI_AWSIZE,
    M00_AXI_AWBURST => M00_AXI_AWBURST,
    M00_AXI_AWLOCK => M00_AXI_AWLOCK,
    M00_AXI_AWCACHE => M00_AXI_AWCACHE,
    M00_AXI_AWPROT => M00_AXI_AWPROT,
    M00_AXI_AWQOS => M00_AXI_AWQOS,
    M00_AXI_AWVALID => M00_AXI_AWVALID,
    M00_AXI_AWREADY => M00_AXI_AWREADY,
    M00_AXI_WDATA => M00_AXI_WDATA,
    M00_AXI_WSTRB => M00_AXI_WSTRB,
    M00_AXI_WLAST => M00_AXI_WLAST,
    M00_AXI_WVALID => M00_AXI_WVALID,
    M00_AXI_WREADY => M00_AXI_WREADY,
    M00_AXI_BID => M00_AXI_BID,
    M00_AXI_BRESP => M00_AXI_BRESP,
    M00_AXI_BVALID => M00_AXI_BVALID,
    M00_AXI_BREADY => M00_AXI_BREADY,
    M00_AXI_ARID => M00_AXI_ARID,
    M00_AXI_ARADDR => M00_AXI_ARADDR,
    M00_AXI_ARLEN => M00_AXI_ARLEN,
    M00_AXI_ARSIZE => M00_AXI_ARSIZE,
    M00_AXI_ARBURST => M00_AXI_ARBURST,
    M00_AXI_ARLOCK => M00_AXI_ARLOCK,
    M00_AXI_ARCACHE => M00_AXI_ARCACHE,
    M00_AXI_ARPROT => M00_AXI_ARPROT,
    M00_AXI_ARQOS => M00_AXI_ARQOS,
    M00_AXI_ARVALID => M00_AXI_ARVALID,
    M00_AXI_ARREADY => M00_AXI_ARREADY,
    M00_AXI_RID => M00_AXI_RID,
    M00_AXI_RDATA => M00_AXI_RDATA,
    M00_AXI_RRESP => M00_AXI_RRESP,
    M00_AXI_RLAST => M00_AXI_RLAST,
    M00_AXI_RVALID => M00_AXI_RVALID,
    M00_AXI_RREADY => M00_AXI_RREADY
  );
-- INST_TAG_END ------ End INSTANTIATION Template ------------

-- You must compile the wrapper file axi_fifo_0.vhd when simulating
-- the core, axi_fifo_0. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

